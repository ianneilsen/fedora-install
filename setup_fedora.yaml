---
# dnf install ansible
# ansible-playbook -K setup-fedora.yml
- name: Setup Fedora 42 with Essential Software
  hosts: localhost
  become: true
  gather_facts: true

  vars:
    # RPM Fusion repositories for additional codecs and software
    rpmfusion_free_url: "https://download1.rpmfusion.org/free/fedora/rpmfusion-free-release-{{ ansible_distribution_major_version }}.noarch.rpm"
    rpmfusion_nonfree_url: "https://download1.rpmfusion.org/nonfree/fedora/rpmfusion-nonfree-release-{{ ansible_distribution_major_version }}.noarch.rpm"

    # Brave browser repository
    brave_repo_key_url: "https://brave-browser-rpm-release.s3.brave.com/brave-core.asc"

    # Visual Studio Code repository
    vscode_repo_key_url: "https://packages.microsoft.com/keys/microsoft.asc"

    kubectl_version: "v1.30.0"

  tasks:
    # Update system first
    - name: Update all packages
      ansible.builtin.dnf:
        name: "*"
        state: latest

    # Enable RPM Fusion repositories for codecs and additional software
    - name: Install RPM Fusion free repository
      ansible.builtin.dnf:
        name: "{{ rpmfusion_free_url }}"
        state: present
        disable_gpg_check: true

    - name: Install RPM Fusion non-free repository
      ansible.builtin.dnf:
        name: "{{ rpmfusion_nonfree_url }}"
        state: present
        disable_gpg_check: true

    # Install basic development and media packages
    - name: Install basic packages from Fedora repos
      ansible.builtin.dnf:
        name:
          - git
          - terminator # only the best terminal
          - firefox
          - vlc
          - wget
          - curl
          - dnf-plugins-core
          - htop
          - vim
          - neovim # cause sometimes you just have to
          - net-tools
          - nvtop
          - iftop
          - iotop-c # now has sec boundaries to run as root only - set net-admin is you want to use sudo
          - perf
          - ripgrep # faster grep
          - fzf # fuzzy finder
          - ShellCheck # https://github.com/koalaman/shellcheck#installing
        state: present

    # Install multimedia codecs for GoPro video support
    #- name: Install multimedia codecs and GStreamer plugins
    #  ansible.builtin.dnf:
    #    name:
         # - gstreamer1-plugins-base
         # - gstreamer1-plugins-good
         # - gstreamer1-plugins-bad-free
         # - gstreamer1-plugins-bad-nonfree
         # - gstreamer1-plugins-ugly
         # - gstreamer1-libav
         # - ffmpeg
         # - x264
         # - x265
         # - libdvdcss
    #    state: present

    # Add Brave browser repository
    - name: Add Brave browser GPG key
      ansible.builtin.rpm_key:
        key: "{{ brave_repo_key_url }}"
        state: present

    - name: Add Brave browser repository
      ansible.builtin.yum_repository:
        name: brave-browser
        description: Brave Browser
        baseurl: https://brave-browser-rpm-release.s3.brave.com/x86_64/
        enabled: true
        gpgcheck: true
        gpgkey: "{{ brave_repo_key_url }}"

    - name: Install Brave browser
      ansible.builtin.dnf:
        name: brave-browser
        state: present

    # Install Sublime Text
    - name: Add Sublime Text GPG key
      ansible.builtin.rpm_key:
        key: https://download.sublimetext.com/sublimehq-rpm-pub.gpg
        state: present

    - name: Add Sublime Text repository
      ansible.builtin.yum_repository:
        name: sublime-text
        description: Sublime Text - x86_64 - Stable
        baseurl: https://download.sublimetext.com/rpm/stable/x86_64/
        enabled: true
        gpgcheck: true
        gpgkey: https://download.sublimetext.com/sublimehq-rpm-pub.gpg

    - name: Install Sublime Text
      ansible.builtin.dnf:
        name: sublime-text
        state: present

    # Install Visual Studio Code
    - name: Add Visual Studio Code GPG key
      ansible.builtin.rpm_key:
        key: "{{ vscode_repo_key_url }}"
        state: present

    - name: Add Visual Studio Code repository
      ansible.builtin.yum_repository:
        name: vscode
        description: Visual Studio Code
        baseurl: https://packages.microsoft.com/yumrepos/vscode
        enabled: true
        gpgcheck: true
        gpgkey: "{{ vscode_repo_key_url }}"

    - name: Install Visual Studio Code
      ansible.builtin.dnf:
        name: code
        state: present

    # Configure VLC for better codec support
    #- name: Install additional VLC codecs
    #  ansible.builtin.dnf:
    #    name:
    #      - vlc-extras
    #    state: present
    #    ignore_errors: yes

# Set up some useful aliases and configurations
    - name: Create .bashrc aliases and history settings for current user
      ansible.builtin.lineinfile:
        path: "~/.bashrc"
        line: "{{ item }}"
        create: true
        mode: '0644'
      loop:
        - "alias ll='ls -alF'"
        - "alias la='ls -A'"
        - "alias l='ls -CF'"
        - "alias grep='grep --color=auto'"
        - "# Enhanced bash history settings"
        - "export HISTSIZE=10000"
        - "export HISTFILESIZE=10000"
        - "export HISTTIMEFORMAT='%F %T '"
        - "export HISTCONTROL=ignoredups:erasedups"
        - "shopt -s histappend"
        - "PROMPT_COMMAND='history -a'"
      become: false

# Install Kubernetes kubectl version 1.x using curl method
    - name: Download kubectl binary
      ansible.builtin.get_url:
        url: https://dl.k8s.io/release/{{ kubectl_version }}/bin/linux/amd64/kubectl
        dest: /tmp/kubectl
        mode: '0755'

    - name: Download kubectl version X checksum
      ansible.builtin.get_url:
        url: https://dl.k8s.io/release/{{ kubectl_version }}/bin/linux/amd64/kubectl.sha256
        dest: /tmp/kubectl.sha256

    - name: Verify kubectl checksum
      ansible.builtin.shell: echo "$(cat /tmp/kubectl.sha256) /tmp/kubectl" | sha256sum --check
      register: checksum_result
      failed_when: checksum_result.rc != 0

    - name: Install kubectl to /usr/local/bin
      ansible.builtin.copy:
        src: /tmp/kubectl
        dest: /usr/local/bin/kubectl
        owner: root
        group: root
        mode: '0755'
        remote_src: true

    - name: Clean up downloaded files
      ansible.builtin.file:
        path: "{{ item }}"
        state: absent
      loop:
        - /tmp/kubectl
        - /tmp/kubectl.sha256

    # Setup kubectl bashrc and autocompletion
    - name: Add kubectl autocompletion to .bashrc
      ansible.builtin.lineinfile:
        path: "{{ ansible_env.HOME }}/.bashrc"
        line: "{{ item }}"
        create: true
      loop:
        - "# Kubectl autocompletion"
        - "source <(kubectl completion bash)"
        - "complete -F __start_kubectl k"
      become: false

    # Ensure multimedia group packages are installed
    - name: Install multimedia group packages
      ansible.builtin.dnf:
        name: "@multimedia"
        state: present

    # Install hardware video acceleration (helpful for GoPro videos)
    # - name: Install hardware video acceleration packages
    #   ansible.builtin.dnf:
    #     name:
    #       - libva
    #       - libva-utils
    #       - intel-media-driver
    #       - mesa-va-drivers
    #     state: present
    #     ignore_errors: yes

# Install essential security tools
    - name: Install security tools
      ansible.builtin.dnf:
        name:
          - keepassxc
          - nmap
          - wireshark
          - lynis
        state: present

# Configure firewalld (default Fedora firewall)
    - name: Ensure firewalld is installed and running
      ansible.builtin.systemd:
        name: firewalld
        enabled: true
        state: started

    - name: Set firewalld default zone to drop (deny all incoming)
      ansible.posix.firewalld:
        zone: drop
        state: enabled
        permanent: true
        immediate: true

    - name: Remove all services from public zone
      ansible.posix.firewalld:
        zone: public
        service: "{{ item }}"
        permanent: true
        immediate: true
        state: disabled
      loop:
        - ssh
        - dhcpv6-client
        - cockpit
      ignore_errors: true

    # Final system update
    - name: Final system update
      ansible.builtin.dnf:
        name: "*"
        state: latest

  handlers:
    - name: Reload systemd
      ansible.builtin.systemd:
        daemon_reload: true

# configure ssh dir on fresh installs.
    - name: Check and create .ssh directory exists
      ansible.builtin.file:
        path: "{{ ansible_env.HOME }}/.ssh"
        state: directory
        mode: '0700'
        owner: "{{ ansible_user_id }}"
        group: "{{ ansible_user_gid }}"

    - name: Set perms on .ssh dir
      ansible.builtin.file:
        path: "{{ ansible_env.HOME }}/.ssh"
        mode: '0700'
        owner: "{{ ansible_user_id }}"
        group: "{{ ansible_user_gid }}"

    - name: Set perms on all .ssh (private keys, config, etc.)
      ansible.builtin.shell: chmod 600 {{ ansible_env.HOME }}/.ssh/*
      ignore_errors: true
      changed_when: false

    - name: Set public key permissions (if any .pub files exist)
      ansible.builtin.shell: chmod 644 {{ ansible_env.HOME }}/.ssh/*.pub
      ignore_errors: true
      changed_when: false

    - name: Verify .ssh directory permissions
      ansible.builtin.stat:
        path: "{{ ansible_env.HOME }}/.ssh"
      register: ssh_dir_stat

# set git global
    - name: Configure Git global user email
      community.general.git_config:
        name: user.email
        scope: global
        value: "ian.neilsen@gmail.com"

    - name: Configure Git global user name
      community.general.git_config:
        name: user.name
        scope: global
        value: "ianneilsen"

    - name: Verify Git configuration
      ansible.builtin.shell: git config --global --list | grep user
      register: git_user_config
      changed_when: false

    - name: Display Git user configuration
      ansible.builtin.debug:
        msg: "{{ git_user_config.stdout_lines }}"

# Post-installation information
- name: Display installation summary
  hosts: localhost
  gather_facts: true
  tasks:
    - name: Show completion message
      ansible.builtin.debug:
        msg:
          - "=== Installation Complete ==="
          - "Installed software:"
          - "  - VLC (with multimedia codecs for GoPro videos)"
          - "  - Git"
          - "  - Terminator terminal"
          - "  - Firefox"
          - "  - Brave browser"
          - "  - Sublime Text"
          - "  - Visual Studio Code"
          - "  - htop (system monitor)"
          - "  - vim (text editor)"
          - "  - netstat (network utilities via net-tools)"
          - ""
          - "GoPro video support includes:"
          - "  - H.264/H.265 codecs"
          - "  - FFmpeg with full codec support"
          - "  - Hardware acceleration drivers"
          - ""
          - "Kubernetes tools configured:"
          - "  - kubectl v1.34 installed with autocompletion"
          - "  - Alias 'k' configured for kubectl (k get pods, k apply -f file.yaml)"
          - "  - Autocompletion works for both 'kubectl' and 'k' commands"
          - ""
          - "To run this playbook:"
          - "  ansible-playbook -K setup-fedora.yml"
          - ""
          - "Note: You may need to reboot for all changes to take effect."


## INSTALL LATER
## npm and claude code cli
# Install Node Version Manager (NVM) and Node.js
# This is useful for managing Node.js versions and installing npm packages.
# Uncomment the following lines to install NVM and Node.js
# Note: This requires curl to be installed.
# curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.7/install.sh | bash
# npm package manager for using claude code cli
# add to bashrc and reload
# export NVM_DIR="$HOME/.nvm"
# [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
# nvm install --lts
# nvm install 22        # Example: latest Node 22.x
# nvm use 22
# install Go
# install vscode extensions - ansible, yaml, docker, - containers, kubernetes, go